{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["navFullData","mapRef","accessToken","viewport","width","height","latitude","longitude","zoom","markerStyle","padding","color","cursor","background","borderRadius","MapContainer","setFrom","event","fromText","target","value","from","setTo","toText","to","setFromLocation","a","url","replace","fetch","then","res","json","result","lat","features","geometry","coordinates","lng","fromLat","fromLng","fromLatLng","setToLocation","toLat","toLng","toLatLng","fetchNavData","query","fullUrl","data","navData","routes","navArray","map","item","key","push","jsonUrl","JSON","parse","catch","err","console","error","alert","submit","mapRemoveLayer","mapAddLayer","getSource","removeLayer","removeSource","log","addSource","type","addLayer","id","source","paint","bbox","fitBounds","top","bottom","left","right","postLocationData","from_location","to_location","method","headers","body","stringify","className","Form","FormGroup","Input","name","placeholder","onChange","this","Button","onClick","style","mapStyle","onViewportChange","children","props","Consumer","draggable","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mMA4BIA,EAEAC,E,gJAtBEC,G,YACL,+GAEGC,EAAW,CACdC,MAAO,QACPC,OAAQ,OACRC,SAAU,SACVC,UAAW,UACXC,KAAM,IAGDC,EAAc,CACnBC,QAAS,OACTC,MAAO,OACPC,OAAQ,UACRC,WAAY,UACZC,aAAc,OAWMC,E,2MACpBC,QAAU,SAAAC,GACT,IAAIC,EAAWD,EAAME,OAAOC,MAC5B,EAAKC,KAAOH,G,EAGbI,MAAQ,SAAAL,GACP,IAAIM,EAASN,EAAME,OAAOC,MAC1B,EAAKI,GAAKD,G,EAGXE,gB,sBAAkB,8BAAAC,EAAA,6DACXR,EAAW,EAAKG,KAChBM,EACL,qDACAT,EAASU,QAAQ,IAAK,OACtB,SACA1B,EANgB,kBAQV2B,MAAMF,GACXG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACL,IAAMC,EAAMD,EAAOE,SAAS,GAAGC,SAASC,YAAY,GAC9CC,EAAML,EAAOE,SAAS,GAAGC,SAASC,YAAY,GAEpD,EAAKE,QAAUL,EACf,EAAKM,QAAUF,EAEf,EAAKG,WAAaP,EAAM,IAAMI,MAjBf,2C,EAqBlBI,c,sBAAgB,8BAAAhB,EAAA,6DACTH,EAAS,EAAKC,GACdG,EACL,qDACAJ,EAAOK,QAAQ,IAAK,OACpB,SACA1B,EANc,kBAQR2B,MAAMF,GACXG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACL,IAAMC,EAAMD,EAAOE,SAAS,GAAGC,SAASC,YAAY,GAC9CC,EAAML,EAAOE,SAAS,GAAGC,SAASC,YAAY,GAEpD,EAAKM,MAAQT,EACb,EAAKU,MAAQN,EAEb,EAAKO,SAAWX,EAAM,IAAMI,MAjBf,2C,EAqBhBQ,a,uCAAe,WAAMC,GAAN,iBAAArB,EAAA,6DACRsB,EACL,uDACAD,EACA,2BACA7C,EALa,SAQR2B,MAAMmB,GACVlB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAmB,GACLC,EAAUD,EAAKE,OAAO,GAAGf,SAASC,YAElC,IAAIe,EAAW,GACfF,EAAQG,KAAI,SAACC,EAAMC,GAClBH,EAASI,KAAK,IAAMF,EAAO,QAG5B,IAAMG,EACL,wEACAL,EACA,MAEDpD,EAAc0D,KAAKC,MAAMF,MAEzBG,OAAM,SAAAC,GACNC,QAAQC,MAAMF,GACdG,MAAM,+BA3BM,2C,wDA+BfC,O,sBAAS,4BAAAvC,EAAA,sEACF,EAAKD,kBADH,uBAEF,EAAKiB,gBAFH,cAGFK,EAAQ,EAAKN,WAAa,IAAM,EAAKI,SAHnC,SAIF,EAAKC,aAAaC,GAJhB,OAQR,EAAKmB,iBAEL,EAAKC,cAVG,2C,EAaTD,eAAiB,WAChB,IACKjE,EAAOmE,UAAU,WACpBnE,EAAOoE,YAAY,SACnBpE,EAAOqE,aAAa,UAEpB,MAAOT,GACRC,QAAQS,IAAIV,K,EAIdM,YAAc,WACTlE,EAAOmE,UAAU,WACpBnE,EAAOoE,YAAY,SACnBpE,EAAOqE,aAAa,UAGrBrE,EAAOuE,UAAU,QAAS,CACzBC,KAAM,UACNxB,KAAMjD,IAGPC,EAAOyE,SAAS,CACfC,GAAI,QACJC,OAAQ,QACRH,KAAM,OACNI,MAAO,CACN,aAAc,UACd,aAAc,KAIhB,IAAIC,EAAO,CAAC,CAAC,EAAKvC,QAAS,EAAKC,SAAU,CAAC,EAAKG,MAAO,EAAKC,QAC5D3C,EAAO8E,UAAUD,EAAM,CACtBpE,QAAS,CAAEsE,IAAK,IAAKC,OAAQ,IAAKC,KAAM,IAAKC,MAAO,Q,EAItDC,iB,uCAAmB,WAAO/D,EAAMG,GAAb,eAAAE,EAAA,sDACZuB,EAAO,CACZoC,cAAehE,EACfiE,YAAa9D,GAEdK,MAAM,sCAAuC,CAC5C0D,OAAQ,OACRC,QAAS,CACR,eAAgB,oBAEjBC,KAAM/B,KAAKgC,UAAUzC,KAEpBnB,MAAK,SAAAC,GAAG,OAAI+B,QAAQS,IAAIxC,MACxB6B,OAAM,SAAAG,GAAK,OAAID,QAAQC,MAAMA,MAbb,2C,gIAgBT,IAAD,OACR,OACC,yBAAK4B,UAAU,yCACd,yBAAKA,UAAU,yBACd,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCrB,KAAK,OACLsB,KAAK,gBACLpB,GAAG,YACHqB,YAAY,uBACZC,SAAUC,KAAKlF,WAGjB,kBAAC6E,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCrB,KAAK,OACLsB,KAAK,cACLpB,GAAG,UACHqB,YAAY,0BACZC,SAAUC,KAAK5E,SAGjB,6BACC,kBAAC6E,EAAA,EAAD,CACCxF,MAAM,UACNgF,UAAU,OACVS,QAASF,KAAKjC,QAHf,UAOA,kBAACkC,EAAA,EAAD,CACCxF,MAAM,UACNyF,QAASF,KAAKhC,gBAFf,YASH,kBAAC,IAAD,iBACK/D,EADL,CAECkG,MAAO,CAACjG,MAAO,OAAQC,OAAQ,QAE/BiG,SAAS,qCACTpG,YACC,gGAEDqG,iBAAkB,SAAApG,GACjB,EAAKA,SAAWA,GAEjBqG,SAAUN,KAAKO,MAAMD,WAErB,kBAAC,IAAWE,SAAZ,MACE,SAAArD,GACApD,EAASoD,KAIV6C,KAAKlG,aACN,kBAAC,WAAD,KACC,kBAAC,IAAD,CACCqC,YAAa,CAAC6D,KAAK3D,QAAS2D,KAAK1D,SACjCmE,WAAS,GAET,yBAAKN,MAAO5F,GAAZ,qB,GAxNmCmG,aCvBtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1F,MAAK,SAAA2F,GACjCA,EAAaC,kB","file":"static/js/main.ee28dda0.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { Button, Form, FormGroup, Input } from 'reactstrap';\r\nimport MapGL, { MapContext, Marker } from '@urbica/react-map-gl';\r\n\r\n//CSS\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst accessToken =\r\n\t'&access_token=pk.eyJ1IjoiYWtzaGF5Mjc5NiIsImEiOiJjazFjbGY2emwwNGZpM25scDcwMjNzMXhlIn0.-D54L9tbYqRfBSaXWgJbrA';\r\n\r\nvar viewport = {\r\n\twidth: '100vw',\r\n\theight: '60vh',\r\n\tlatitude: 18.52043,\r\n\tlongitude: 73.856743,\r\n\tzoom: 12,\r\n};\r\n\r\nconst markerStyle = {\r\n\tpadding: '10px',\r\n\tcolor: '#fff',\r\n\tcursor: 'pointer',\r\n\tbackground: '#1978c8',\r\n\tborderRadius: '6px'\r\n  };\r\n  \r\n\r\nvar navFullData;\r\n\r\nvar mapRef;\r\n\r\nvar from, fromLat, fromLng, fromLatLng;\r\nvar to, toLat, toLng, toLatLng;\r\n\r\nexport default class MapContainer extends Component {\r\n\tsetFrom = event => {\r\n\t\tvar fromText = event.target.value;\r\n\t\tthis.from = fromText;\r\n\t};\r\n\r\n\tsetTo = event => {\r\n\t\tvar toText = event.target.value;\r\n\t\tthis.to = toText;\r\n\t};\r\n\r\n\tsetFromLocation = async () => {\r\n\t\tconst fromText = this.from;\r\n\t\tconst url =\r\n\t\t\t'https://api.mapbox.com/geocoding/v5/mapbox.places/' +\r\n\t\t\tfromText.replace(' ', '%20') +\r\n\t\t\t'.json?' +\r\n\t\t\taccessToken;\r\n\r\n\t\treturn fetch(url)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(result => {\r\n\t\t\t\tconst lat = result.features[0].geometry.coordinates[0];\r\n\t\t\t\tconst lng = result.features[0].geometry.coordinates[1];\r\n\r\n\t\t\t\tthis.fromLat = lat;\r\n\t\t\t\tthis.fromLng = lng;\r\n\r\n\t\t\t\tthis.fromLatLng = lat + ',' + lng;\r\n\t\t\t});\r\n\t};\r\n\r\n\tsetToLocation = async () => {\r\n\t\tconst toText = this.to;\r\n\t\tconst url =\r\n\t\t\t'https://api.mapbox.com/geocoding/v5/mapbox.places/' +\r\n\t\t\ttoText.replace(' ', '%20') +\r\n\t\t\t'.json?' +\r\n\t\t\taccessToken;\r\n\r\n\t\treturn fetch(url)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(result => {\r\n\t\t\t\tconst lat = result.features[0].geometry.coordinates[0];\r\n\t\t\t\tconst lng = result.features[0].geometry.coordinates[1];\r\n\r\n\t\t\t\tthis.toLat = lat;\r\n\t\t\t\tthis.toLng = lng;\r\n\r\n\t\t\t\tthis.toLatLng = lat + ',' + lng;\r\n\t\t\t});\r\n\t};\r\n\r\n\tfetchNavData = async query => {\r\n\t\tconst fullUrl =\r\n\t\t\t'https://api.mapbox.com/directions/v5/mapbox/driving/' +\r\n\t\t\tquery +\r\n\t\t\t'.json?geometries=geojson' +\r\n\t\t\taccessToken;\r\n\r\n\t\tvar navData;\r\n\t\tawait fetch(fullUrl)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tnavData = data.routes[0].geometry.coordinates;\r\n\r\n\t\t\t\tvar navArray = [];\r\n\t\t\t\tnavData.map((item, key) => {\r\n\t\t\t\t\tnavArray.push('[' + item + ']');\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst jsonUrl =\r\n\t\t\t\t\t'{\"type\": \"Feature\",\"geometry\": {\"type\": \"LineString\",\"coordinates\": [' +\r\n\t\t\t\t\tnavArray +\r\n\t\t\t\t\t']}}';\r\n\r\n\t\t\t\tnavFullData = JSON.parse(jsonUrl);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t\talert('Unable to find Location!');\r\n\t\t\t});\r\n\t};\r\n\r\n\tsubmit = async () => {\r\n\t\tawait this.setFromLocation();\r\n\t\tawait this.setToLocation();\r\n\t\tconst query = this.fromLatLng + ';' + this.toLatLng;\r\n\t\tawait this.fetchNavData(query);\r\n\r\n\t\t//await this.postLocationData(this.from, this.to);\r\n\r\n\t\tthis.mapRemoveLayer();\r\n\r\n\t\tthis.mapAddLayer();\r\n\t};\r\n\r\n\tmapRemoveLayer = () => {\r\n\t\ttry {\r\n\t\t\tif (mapRef.getSource('route')) {\r\n\t\t\t\tmapRef.removeLayer('route');\r\n\t\t\t\tmapRef.removeSource('route');\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t};\r\n\r\n\tmapAddLayer = () => {\r\n\t\tif (mapRef.getSource('route')) {\r\n\t\t\tmapRef.removeLayer('route');\r\n\t\t\tmapRef.removeSource('route');\r\n\t\t}\r\n\r\n\t\tmapRef.addSource('route', {\r\n\t\t\ttype: 'geojson',\r\n\t\t\tdata: navFullData,\r\n\t\t});\r\n\r\n\t\tmapRef.addLayer({\r\n\t\t\tid: 'route',\r\n\t\t\tsource: 'route',\r\n\t\t\ttype: 'line',\r\n\t\t\tpaint: {\r\n\t\t\t\t'line-color': '#336666',\r\n\t\t\t\t'line-width': 6,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tvar bbox = [[this.fromLat, this.fromLng], [this.toLat, this.toLng]];\r\n\t\tmapRef.fitBounds(bbox, {\r\n\t\t\tpadding: { top: 100, bottom: 100, left: 100, right: 100 },\r\n\t\t});\r\n\t};\r\n\r\n\tpostLocationData = async (from, to) => {\r\n\t\tconst data = {\r\n\t\t\tfrom_location: from,\r\n\t\t\tto_location: to,\r\n\t\t};\r\n\t\tfetch('http://127.0.0.1:8000/api/map-data/', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(data),\r\n\t\t})\r\n\t\t\t.then(res => console.log(res))\r\n\t\t\t.catch(error => console.error(error));\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='d-flex flex-column align-items-center'>\r\n\t\t\t\t<div className='text-center mt-4 mb-4'>\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tname='from_location'\r\n\t\t\t\t\t\t\t\tid='fromInput'\r\n\t\t\t\t\t\t\t\tplaceholder='Enter Starting Point'\r\n\t\t\t\t\t\t\t\tonChange={this.setFrom}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tname='to_location'\r\n\t\t\t\t\t\t\t\tid='toInput'\r\n\t\t\t\t\t\t\t\tplaceholder='Enter Destination Point'\r\n\t\t\t\t\t\t\t\tonChange={this.setTo}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\tclassName=\"mr-3\"\r\n\t\t\t\t\t\t\t\tonClick={this.submit}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\tonClick={this.mapRemoveLayer}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tClear\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</div>\r\n\t\t\t\t<MapGL\r\n\t\t\t\t\t{...viewport}\r\n\t\t\t\t\tstyle={{width: '98vw', height: '82vh'}}\r\n\t\t\t\t\t// mapStyle='mapbox://styles/mapbox/light-v9'\r\n\t\t\t\t\tmapStyle='mapbox://styles/mapbox/streets-v11'\r\n\t\t\t\t\taccessToken={\r\n\t\t\t\t\t\t'pk.eyJ1IjoiYWtzaGF5Mjc5NiIsImEiOiJjazFjbGphcGcwbTQyM2Rtd2oxZW9tYWRuIn0.0UVb63pN3wW_LIsQWpECIw'\r\n\t\t\t\t\t}\r\n\t\t\t\t\tonViewportChange={viewport => {\r\n\t\t\t\t\t\tthis.viewport = viewport;\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tchildren={this.props.children}\r\n\t\t\t\t>\r\n\t\t\t\t\t<MapContext.Consumer>\r\n\t\t\t\t\t\t{map => {\r\n\t\t\t\t\t\t\tmapRef = map;\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t</MapContext.Consumer>\r\n\r\n\t\t\t\t\t{this.navFullData &&\r\n\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t<Marker\r\n\t\t\t\t\t\t\tcoordinates={[this.fromLat, this.fromLng]}\r\n\t\t\t\t\t\t\tdraggable\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div style={markerStyle}>Hi There!</div>\r\n\t\t\t\t\t\t</Marker>\r\n\t\t\t\t\t</Fragment>}\r\n\t\t\t\t</MapGL>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}